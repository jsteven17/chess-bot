##########################################
#---------------execute.py---------------#
##########################################

#-------------Description----------------#
# Takes the chess square coordinates generated by calibrate.py
# in the form of a plain text document and subdivides a fresh 
# capture from the imaging software (this occurs for each human
# player move) into 64 sub images. These images are then individualy
# evaluated to determine first whether or not a piece exists on it 
# and second, what the color of the piece is.

#-----------Input Arguments--------------#
# 1. txt file containing line separated coordinates
# 2. A single image capture from the imaging software of
#    the current board state

#-----------Output Arguments-------------#
# 1. 64 charachters each separated by a new line with the values
#    'B' 'W' or 'N', denoting black, white, and none. (values listed
#    in order from left to right starting from the top left corner of
#    the chess board)

#----------Implementation Map------------#
# This is by far the hardest technical part of the python programming
# and likely the hardest part of the entire project. Differences in lighting
# and glare from harsh light sources makes it near impossible
# to accurately determine the color of pieces each time without fail.
# At the very least to achieve a working implementation off a model 
# where only one picture of the board is used, a baseline image will need to
# be taken of the board at the start of the game with both sides set up
# so that color samples can be taken of the black and white pieces. Even with
# this data however, it is extreemely difficult to accurately track piece position
# and color in a gradient light environment. One possible solution would
# be to use an alternate implementation where two images of the chessboard 
# are analyzed, one before the human move and one after. In this implementation,
# the images can be subtracted thereby easily identifying the moved piece. The
# squares that changed can also be evaluated for average color to see whether
# a white or black piece was moved to it. Even with the alternate implementation,
# this algorithm will be exceedingly difficult to build to a reliable
# state, much less perfection. In the case that direct image manipulation
# using traditional methods is unsatisfactory, two aditional more
# complex options are still available in A. machine learning to empirically
# train the program and B. a second piece of image hardware to get another
# angle and more color information on the chessboard.
